// gradle plugins
plugins {
    id 'java'
    // kotlin
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    // Spring Boot and Spring Boot Management
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
//    id 'me.champeau.jmh' version '0.7.1'
}

group 'jhlz.code'
version '0.0.1'
// 定义源文件中使用的 Java 语言版本
sourceCompatibility = '17'
//定义代码应运行的最低 JVM 版本，即确定编译器生成的字节码的版本
targetCompatibility = '17'

// 配置的源会从上到下依次寻找
repositories {
    // 本地仓库
    mavenLocal()
    // 镜像仓库
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/spring/' }
    // maven 中央仓库
    mavenCentral()
}

// 定义版本变量管理依赖版本
ext {
    // jmh 测试套件版本
    jmhVersion = '1.36'
    // fastjson2 版本
    fastjson2Version = '2.0.32'
    zxingVersion = '3.5.1'
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    implementation("com.alibaba.fastjson2:fastjson2:${fastjson2Version}")
    implementation "com.google.zxing:core:${zxingVersion}"

    // ############################ test dependencies ##############################
    // jmh test
    testImplementation("org.openjdk.jmh:jmh-core:${jmhVersion}")
    testAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}")
    // spring boot test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// 源代码目录 Java + Kotlin 混合编程
sourceSets {
    main {
        java {
            srcDirs('src/main/java')
        }
        kotlin {
            srcDirs('src/main/kotlin')
        }
    }
}

test {
    useJUnitPlatform()
}

// 只要有冲突，就会直接报错，控制台会输出具体的依赖项和版本。
configurations.configureEach {
    resolutionStrategy {
        failOnVersionConflict()
    }
}